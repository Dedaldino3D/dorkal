# Generated by Django 3.0.1 on 2020-02-08 18:55

import backend.users.models
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=250, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@]+$'), 'Name can only contain letters and character @', 'invalid')], verbose_name='user')),
                ('email', models.EmailField(max_length=250, unique=True, verbose_name='email')),
                ('phone_number', models.CharField(max_length=16, null=True, unique=True)),
                ('account_status', models.CharField(blank=True, choices=[('DD', 'deactive'), ('A', 'active'), ('B', 'blocked'), ('DL', 'deleted')], default='DD', max_length=45, verbose_name='account status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExternalAccounts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('facebook_email', models.EmailField(blank=True, max_length=45, null=True, verbose_name='facebook email')),
                ('twitter_username', models.CharField(blank=True, max_length=45, null=True, verbose_name='twitter username')),
            ],
            options={
                'verbose_name': 'external account',
                'verbose_name_plural': 'external accounts',
                'db_table': 'external_accounts',
            },
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('location_id', models.AutoField(primary_key=True, serialize=False)),
                ('city', models.CharField(blank=True, max_length=150, verbose_name='city')),
                ('state', models.CharField(blank=True, max_length=150, verbose_name='state')),
                ('country', models.CharField(blank=True, max_length=150, verbose_name='country')),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
                'db_table': 'locations',
            },
        ),
        migrations.CreateModel(
            name='RelationshipStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('verb', models.CharField(max_length=100, verbose_name='verb')),
                ('from_slug', models.CharField(help_text="Denote the relationship from the user, i.e. 'following'", max_length=100, verbose_name='from slug')),
                ('to_slug', models.CharField(help_text="Denote the relationship to the user, i.e. 'followers'", max_length=100, verbose_name='to slug')),
                ('symmetrical_slug', models.CharField(help_text="When a mutual relationship exists, i.e. 'friends'", max_length=100, verbose_name='symmetrical slug')),
                ('login_required', models.BooleanField(default=False, help_text='Users must be logged in to see these relationships', verbose_name='login required')),
                ('private', models.BooleanField(default=False, help_text='Only the user who owns these relationships can see them', verbose_name='private')),
            ],
            options={
                'verbose_name': 'relationship status',
                'verbose_name_plural': 'relationship statuses',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('notifications_followers', models.CharField(choices=[(0, False), (1, True)], default=1, max_length=2, verbose_name='followers notifications')),
                ('notifications_comments', models.CharField(choices=[(0, False), (1, True)], default=1, max_length=2, verbose_name='comments notifications')),
                ('notifications_messages', models.CharField(choices=[(0, False), (1, True)], default=1, max_length=2, verbose_name='messages notifications')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user settings',
                'verbose_name_plural': 'users settings',
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_profile_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=125, validators=[django.core.validators.RegexValidator(re.compile('^[\\w]+$'), 'Only can has letters', 'invalid')], verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=125, validators=[django.core.validators.RegexValidator(re.compile('^[\\w]+$'), 'Only can has letters', 'invalid')], verbose_name='last name')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='profile image')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('NS', 'Not specified')], default='NS', max_length=2, verbose_name='gender')),
                ('DOB', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('occupation', models.TextField(blank=True, verbose_name='occupation')),
                ('about', models.TextField(blank=True, verbose_name='about')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='location', to='users.Locations', verbose_name='location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'users profiles',
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_users', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status', to='users.RelationshipStatus')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'relationship',
                'verbose_name_plural': 'relationships',
                'ordering': ('-created',),
                'unique_together': {('from_user', 'to_user', 'status')},
            },
            managers=[
                ('objects', backend.users.models.RelationshipManager()),
            ],
        ),
    ]
